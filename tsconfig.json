{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,

    // 이 옵션을 켜지 않으면
    // import * as express from 'express' 식으로만 연결 가능하다.
    // 이러면 express() 식으로 실행시 에러가 난다.
    // 이 옵션을 켜면
    // import express from 'express' 식으로 연결할 수 있다.
    // express() 식으로 실행할 수 있다.
    "allowSyntheticDefaultImports": true,

    // js 파일이 출력될 디렉토리.
    "outDir": "dist",
    "sourceMap": true,

    // 소스 파일의 루트를 어디로 볼 것인가를 결정한다.
    // outDir 디렉토리에 사용할 서브 패스에 영향을 준다.
    // rootDir 이 "src"일 경우 src/a.ts -> dist/a.js 가 된다.
    // rootDir 이 "."일 경우 src/a.ts -> dist/src/a.js 가 된다.
    // 보통 "src" 정도를 쓰는데 WebStorm 에서 문제가 생겼다.
    // Run Config 에서 $FileDirPathFromParent(src)$ 매크로가 작동하지 않는다.
    // Jasmine 테스트 런을 편하게 하기위해 할 수 없이 rooDir 을 "." 으로 세팅하고
    // dist/src/.../*.js 를 실행하도록 했다.
    "rootDir": ".",

    "target": "es2018", // async iterators
    "module": "es2015",

    // "Node" 또는 "Classic"
    // Node 프로젝트라면 무조건 "Node" 여야 한다.
    // Node 방식을 쓰지 않을 수 없다.
    "moduleResolution": "Node",

    //"esModuleInterop": true,

    "lib": [],

    // 절대경로 import 는 TypeScript 까진 가능하다.
    // 하지만 번들러를 동원하지 않고는 출력된 js 를 실행시킬 방법이 없다.
    // 그냥 상대경로 import 를 사용하도록 한다.
    // "baseUrl": "./"

  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
  ]
}
